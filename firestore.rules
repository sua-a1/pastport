rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRequiredCharacterFields() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'userId', 'name', 'description', 'stylePrompt', 'status']) &&
             data.userId == request.auth.uid &&
             data.name is string && data.name.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.stylePrompt is string && data.stylePrompt.size() > 0 &&
             data.status in ['not_started', 'generating', 'completed', 'failed'] &&
             data.referenceImages is list &&
             data.generatedImages is list;
    }
    
    function hasValidCharacterData() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'userId', 'name', 'description', 'stylePrompt', 'referenceImages', 'generatedImages', 'status', 'createdAt', 'updatedAt']) &&
             data.userId == request.auth.uid &&
             data.name is string && data.name.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.stylePrompt is string && data.stylePrompt.size() > 0 &&
             data.referenceImages is list &&
             data.generatedImages is list &&
             data.status in ['not_started', 'generating', 'completed', 'failed'] &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    function hasValidReferenceImage() {
      let image = request.resource.data;
      return image.keys().hasAll(['url', 'prompt', 'weight']) &&
             image.url is string && image.url.size() > 0 &&
             image.prompt is string && image.prompt.size() > 0 &&
             image.weight is number && image.weight >= 0 && image.weight <= 1;
    }
    
    // Characters collection rules
    match /characters/{characterId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasRequiredCharacterFields();
      allow update: if isAuthenticated() && 
                      request.resource.data.userId == resource.data.userId &&
                      request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Reference images collection rules
    match /reference_images/{imageId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Draft validation functions
    function isValidDraft() {
      let incomingData = request.resource.data;
      return incomingData.size() <= 20
        && 'id' in incomingData && incomingData.id is string
        && 'userId' in incomingData && incomingData.userId is string
        && 'title' in incomingData && incomingData.title is string && incomingData.title.size() <= 100
        && 'content' in incomingData && incomingData.content is string && incomingData.content.size() <= 10000
        && 'category' in incomingData && incomingData.category in ['Historical', 'Myth & Lore']
        && (!('subcategory' in incomingData) || incomingData.subcategory in ['Canonical', 'Speculative', 'Alternate'])
        && 'status' in incomingData && incomingData.status in ['Draft', 'Ready for AI', 'Generating', 'Published']
        && 'createdAt' in incomingData && incomingData.createdAt is timestamp
        && 'updatedAt' in incomingData && incomingData.updatedAt is timestamp
        && 'imageUrls' in incomingData && incomingData.imageUrls is list && incomingData.imageUrls.size() <= 4
        && 'videoUrls' in incomingData && incomingData.videoUrls is list && incomingData.videoUrls.size() <= 2
        && 'referenceTextIds' in incomingData && incomingData.referenceTextIds is list && incomingData.referenceTextIds.size() <= 2;
    }
    
    function isValidReferenceText() {
      let incomingData = request.resource.data;
      return incomingData.size() <= 10
        && 'id' in incomingData && incomingData.id is string
        && 'title' in incomingData && incomingData.title is string && incomingData.title.size() <= 100
        && 'content' in incomingData && incomingData.content is string && incomingData.content.size() <= 5000
        && 'createdAt' in incomingData && incomingData.createdAt is timestamp
        && 'updatedAt' in incomingData && incomingData.updatedAt is timestamp
        && (!('source' in incomingData) || incomingData.source is string)
        && 'draftIds' in incomingData && incomingData.draftIds is list;
    }
    
    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
                   && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
                   && request.auth.uid == resource.data.userId;
      allow update: if isAuthenticated() 
                   && request.auth.uid == resource.data.userId;
    }
    
    // User-specific rules
    match /users/{userId} {
      // Allow read for all authenticated users to support user profiles
      allow read: if isAuthenticated();
      // Allow write only for the user's own document
      allow write: if isOwner(userId);
      
      // User's posts subcollection
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(userId);
        allow delete: if isAuthenticated() 
                     && isOwner(userId)
                     && request.auth.uid == resource.data.userId;
      }
      
      // User's drafts subcollection
      match /drafts/{draftId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() 
                     && isOwner(userId)
                     && isValidDraft()
                     && request.resource.data.userId == userId;
        allow update: if isAuthenticated() 
                     && isOwner(userId)
                     && isValidDraft()
                     && resource.data.userId == userId;
        allow delete: if isAuthenticated() && isOwner(userId);
      }

      // User's reference texts subcollection
      match /referenceTexts/{textId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() 
                     && isOwner(userId)
                     && isValidReferenceText();
        allow update: if isAuthenticated() 
                     && isOwner(userId)
                     && isValidReferenceText();
        allow delete: if isAuthenticated() && isOwner(userId);
      }

      // User's characters subcollection
      match /characters/{characterId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId);
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }

      // User's reference images subcollection
      match /reference_images/{imageId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId);
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // User's posts subcollection
    match /users/{userId}/posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow delete: if isAuthenticated() 
                   && isOwner(userId)
                   && request.auth.uid == resource.data.userId;
    }
    
    // AI Scripts collection rules
    match /ai_scripts/{scriptId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
                   && request.auth.uid == resource.data.userId
                   && (!('sceneVideos' in request.resource.data) 
                       || (request.resource.data.sceneVideos is list 
                           && request.resource.data.sceneVideos.size() >= 0));
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Add rules for scene videos subcollection
      match /scene_videos/{videoId} {
        allow read: if isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/ai_scripts/$(scriptId)).data.userId;
        allow create: if isAuthenticated() 
                     && request.auth.uid == get(/databases/$(database)/documents/ai_scripts/$(scriptId)).data.userId
                     && isValidSceneVideo();
        allow update: if isAuthenticated() 
                     && request.auth.uid == get(/databases/$(database)/documents/ai_scripts/$(scriptId)).data.userId
                     && isValidSceneVideo();
        allow delete: if isAuthenticated() 
                     && request.auth.uid == get(/databases/$(database)/documents/ai_scripts/$(scriptId)).data.userId;
      }
    }
    
    // Helper function for scene video validation
    function isValidSceneVideo() {
      let video = request.resource.data;
      return video.keys().hasAll(['sceneIndex', 'videoUrl', 'duration', 'status', 'metadata'])
             && video.sceneIndex is number
             && video.videoUrl is string 
             && video.videoUrl.size() > 0
             && video.duration is number 
             && video.duration > 0
             && video.status is map
             && 'type' in video.status
             && video.status.type in ['not_started', 'in_progress', 'completed', 'failed']
             && video.metadata is map;
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} v