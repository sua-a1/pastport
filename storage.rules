rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Base function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the file
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Function to check if file is a valid image
    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024;  // 5MB max
    }
    
    // Function to check if file is a valid video
    function isValidVideo() {
      return request.resource.contentType.matches('video/.*')
        && request.resource.size < 100 * 1024 * 1024;  // 100MB max
    }
    
    // Allow access to all character image paths
    match /characters/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Draft attachments rules
    match /drafts/{userId}/{draftId}/images/{imageId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create, update: if isAuthenticated() 
                   && isOwner(userId)
                   && isValidImage();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    match /drafts/{userId}/{draftId}/videos/{videoId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create, update: if isAuthenticated() 
                   && isOwner(userId)
                   && isValidVideo();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Profile images rules
    match /profile_images/{filename} {
      allow read: if true;  // Anyone can view profile photos
      allow create, update, delete: if isAuthenticated() 
                                   && filename.matches(request.auth.uid + '_.*');
    }
    
    // Videos folder rules
    match /videos/{filename} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
                   && filename.matches(request.auth.uid + '_.*')
                   && isValidVideo();
      allow delete: if isAuthenticated() 
                   && filename.matches(request.auth.uid + '_.*');
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}